import cv2 as cv
import numpy as np
import math
import os

# Load the image
image = cv.imread("Vores_MiniProjekt/King Domino dataset/King Domino dataset/Cropped and perspective corrected boards/37.jpg")
cv.imshow("board", image)   

# Split the image into RGB channels
B, G, R = cv.split(image)

# Subtract the red channel from the green channel
GRSub = cv.subtract(G, R)
#cv.imshow("GRSub", GRSub)

# Subtract the green channel from the blue channel
BGSub = cv.subtract(B, G)

# Subtract the blue channel from the red channel
RBSub = cv.subtract(R, B)

# Subtract GRSub from the blue channel
BSub = cv.subtract(B, GRSub)
#cv.imshow("BSub", BSub)

# Subtracting BGSub from BSub
BGBSub = cv.subtract(BSub, BGSub)
#cv.imshow("BGBub", BGBSub)

# Subtracting RBSub from GBGSub
FinalImage = cv.subtract(BGBSub, RBSub)
#cv.imshow("FinalImage", FinalImage)

# Convert the image to the grayscale color space
gray_img = cv.merge((FinalImage, FinalImage, FinalImage))

cv.imshow("gray_img", gray_img)

# Template
template = cv.imread("C:/Users/minik/Desktop/VSCode/Crown_bw.png", cv.IMREAD_COLOR)

gray_img2 = cv.GaussianBlur(gray_img, (7, 7), 0)
#v.imshow("template", gray_img2)

# Create an array with the templates rotated 90, 180 and 270 degrees
Templates = [template, cv.rotate(template, cv.ROTATE_90_CLOCKWISE), cv.rotate(template, cv.ROTATE_180), cv.rotate(template, cv.ROTATE_90_COUNTERCLOCKWISE)]

template = cv.cvtColor(template, cv.COLOR_BGR2GRAY)
#Templates = [template, templateL, templateD, templateR]

#Templates2 = [template2, cv.rotate(template2, cv.ROTATE_90_CLOCKWISE), cv.rotate(template2, cv.ROTATE_180), cv.rotate(template2, cv.ROTATE_90_COUNTERCLOCKWISE)]

# Store width and height of image and template in w and h
w, h, channels = image.shape

print(image.shape)

tw, th = template.shape

MatchCount = []

distance_threshold = 10

crowns = np.zeros((5,5), dtype=int)

for k in range(len(Templates)):
    res = cv.matchTemplate(gray_img, Templates[k], cv.TM_CCOEFF_NORMED)
    loc = np.where(res >= 0.56) #0.56 
    
    UniquePoints = []
    MatchPoints = list(zip(*loc[::-1]))
    # print(MatchList)
    
    for match in MatchPoints:
        unique = True
        for entries in UniquePoints:
            if math.sqrt((match[0] - entries[0])**2 + (match[1] - entries[1])**2) < distance_threshold:
                unique = False
                break
        if unique:
            UniquePoints.append(match)
            MatchCount.append(match)
            # print(UniquePoints)
    
    for pt in UniquePoints:
        cv.rectangle(image, pt, (pt[0] + tw, pt[1] + th), (0, 255, 255), 2)
        x, y = pt
        row = y // (w // 5)
        column = x // (h // 5)
        crowns[row, column] += 1

print(crowns)
cv.imshow("Detected", image)
cv.waitKey(0)